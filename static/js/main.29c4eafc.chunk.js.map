{"version":3,"sources":["modules/blendPoint.js","App.js","reportWebVitals.js","index.js"],"names":["BlendPoint","levels","row","col","cell","pA","pB","pC","sampleSize","ingredients","x","y","className","style","top","left","toFixed","Object","keys","map","ik","classes","push","replace","toLowerCase","iv","join","defaultA","defaultB","defaultC","getBlends","pointA","pointB","pointC","ingredientKeys","sort","blends","ingredient_values","reduce","accumlator","THE_POINT","idx","hasOwnProperty","scaler","obj","key","index","pointData","App","useState","setPointA","setPointB","setPointC","setLevels","setSampleSize","errors","setErrors","showIngredient","setShowIngredient","updatePoints","A","B","C","_errors","JSON","parse","err","length","blend","indexOf","rows","defaultValue","stringify","onChange","e","target","value","type","min","max","readOnly","step","disabled","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.29c4eafc.chunk.js","sourcesContent":["import React from 'react'\n\nconst BlendPoint = ({ levels, row, col, cell, pA, pB, pC, sampleSize=20, ingredients }) => {\n  let x = col / (levels-1);\n  x += ((levels-1 - row) / (levels-1))*0.5;\n  let y = row / (levels-1);\n\n  return (\n    <div className=\"blendPoint\" style={{\n      top: `${y * 100}%`,\n      left: `${x * 100}%`,\n    }}>\n      <div className=\"blendPoint__data\">\n        <span className=\"blendPoint__info\">\n          <span className=\"blendPoint__cell\">{cell+1}<br/></span>\n          <span className=\"blendPoint__pA\"><span className=\"blendPoint__label\">A</span> <strong>{(pA*sampleSize).toFixed(1)}</strong></span><br/>\n          <span className=\"blendPoint__pB\"><span className=\"blendPoint__label\">B</span> <strong>{(pB*sampleSize).toFixed(1)}</strong></span><br/>\n          <span className=\"blendPoint__pC\"><span className=\"blendPoint__label\">C</span> <strong>{(pC*sampleSize).toFixed(1)}</strong></span>\n        </span>\n        <span className=\"blendPoint__ingredients\">{ Object.keys(ingredients).map( ik => {\n          let classes = ['ingredient_row'];\n          classes.push( `ingredient_row--${ik.replace(/(^-\\d-|^\\d|^-\\d|^--)/,'a$1').replace(/[\\W]/g, '-').toLowerCase()}` );\n          const iv = ingredients[ik];\n          if ( iv === 0 ) classes.push('ingredients_row--zero')\n          return <span key={ik} className={classes.join(' ')}><span className=\"ingredient_label\">{ik}</span><span className=\"ingredient_ratio\">{iv.toFixed(2)}</span></span>\n        } ) }</span>\n      </div>\n    </div>\n  )\n}\n\nexport default BlendPoint\n","import React, { useState } from 'react'\nimport BlendPoint from './modules/blendPoint'\nimport './App.css';\n\nconst defaultLevels = 5;\nconst defaultA =\n{\n  \"Potash Feldspar\": 80,\n  \"Synthetic Wood Ash\": 20\n}\nconst defaultB =\n{\n  \"Synthetic Wood Ash\": 50,\n  \"Potash Feldspar\": 10,\n  \"Kaolin\": 40\n}\nconst defaultC =\n{\n  \"Synthetic Wood Ash\": 50,\n  \"Synthetic Straw Ash\": 50\n}\n/*\n    [0] [1] [2] [3] [4]\n[0]  A\n[1]  x   x\n[2]  x   x   x\n[3]  x   x   x   x\n[4]  B   x   x   x   C\n*/\n\n\nfunction getBlends({pointA, pointB, pointC, levels}) {\n  const ingredientKeys = Object.keys({ ...pointA, ...pointB, ...pointC }).sort();\n  let blends = [];\n\n  for (let row = 0; row < levels; row++) {\n    let pA = (levels-1-row) / (levels-1);\n    for (let col = 0; col < row+1; col++) {\n      let cell = (row * (row + 1)) / 2 + col; // Partial sums\n      let pB = row / (levels-1) - (col / (levels-1));\n      let pC = col / (levels-1);\n      let ingredient_values = ingredientKeys.map( ik => {\n        let ingredient_value = [ pointA, pointB, pointC ].reduce( (accumlator, THE_POINT, idx) => {\n          if ( THE_POINT.hasOwnProperty(ik) ) {\n            let scaler = 0;\n            if ( idx === 0 ) scaler = pA;\n            if ( idx === 1 ) scaler = pB;\n            if ( idx === 2 ) scaler = pC;\n            return accumlator + THE_POINT[ik] * scaler;\n          }\n          return accumlator;\n        }, 0 );\n        return ingredient_value;\n      });\n      const ingredients = ingredientKeys.reduce((obj, key, index) => ({ ...obj, [key]: ingredient_values[index] }), {});\n      let pointData = { row, col, cell, pA, pB, pC, ingredients };\n      blends.push( pointData );\n    }\n  }\n  return blends;\n}\n\nfunction App() {\n  const [pointA, setPointA] = useState(defaultA);\n  const [pointB, setPointB] = useState(defaultB);\n  const [pointC, setPointC] = useState(defaultC);\n  const [levels, setLevels] = useState(defaultLevels);\n  const [sampleSize, setSampleSize] = useState(20);\n  const [errors, setErrors] = useState([]);\n  const [showIngredient, setShowIngredient] = useState(true);\n\n  function updatePoints({ A, B, C }) {\n    let _errors = [];\n    if ( A ) {\n      try {\n        const pA = JSON.parse( A );\n        if ( pA ) setPointA( pA );\n      } catch (err) {\n        _errors.push('A');\n      }\n    }\n    if ( B ) {\n      try {\n        const pB = JSON.parse( B );\n        if ( pB ) setPointB( pB );\n      } catch (err) {\n        _errors.push('B');\n      }\n    }\n    if ( C ) {\n      try {\n        const pC = JSON.parse( C );\n        if ( pC ) setPointC( pC );\n      } catch (err) {\n        _errors.push('C');\n      }\n    }\n    setErrors(_errors);\n  }\n\n  return (\n    <div className={`App ${errors && errors.length>0 ? 'has-err' : 'no-err'} ${showIngredient? 'show-ingredient' : 'show-ratio'}`}>\n      <div className=\"chart\">\n        {\n          getBlends({pointA, pointB, pointC, levels}).map( blend => {\n            return <BlendPoint key={blend.cell} levels={levels} sampleSize={sampleSize} {...blend} />\n          } )\n        }\n      </div>\n\n      <div className=\"controller\">\n        <div className=\"controller__row\">\n          <h4>A</h4>\n          <textarea\n            className={errors.indexOf('A')===-1 ? 'no-error' : 'has-error'}\n            rows={5}\n            defaultValue={JSON.stringify(pointA, null, 2)}\n            onChange={e => updatePoints({\"A\": e.target.value})}\n          />\n        </div>\n\n        <div className=\"controller__row\">\n          <h4>B</h4>\n          <textarea\n            className={errors.indexOf('B')===-1 ? 'no-error' : 'has-error'}\n            rows={5}\n            defaultValue={JSON.stringify(pointB, null, 2)}\n            onChange={e => updatePoints({\"B\": e.target.value})}\n          />\n        </div>\n\n        <div className=\"controller__row\">\n          <h4>C</h4>\n          <textarea\n            className={errors.indexOf('C')===-1 ? 'no-error' : 'has-error'}\n            rows={5}\n            defaultValue={JSON.stringify(pointC, null, 2)}\n            onChange={e => updatePoints({\"C\": e.target.value})}\n          />\n        </div>\n\n        <div className=\"controller__row\">\n          <h4>Levels</h4>\n          <input type=\"range\" min={3} max={7} defaultValue={levels} onChange={e => setLevels(e.target.value)} />&nbsp;<input type=\"number\" value={levels} readOnly />\n        </div>\n\n        <div className=\"controller__row\">\n          <h4>Sample Size</h4>\n          <input type=\"range\" min={20} max={100} step=\"5\" defaultValue={sampleSize} onChange={e => setSampleSize(e.target.value)} />&nbsp;<input type=\"number\" value={sampleSize} readOnly />\n        </div>\n\n        <div className=\"controller__row\">\n          <h4>Mode</h4>\n          <p className=\"modeToggle\">\n            <button disabled={showIngredient?true:false} onClick={e => setShowIngredient(true)}>Ingredient</button>&nbsp;\n            <button disabled={showIngredient?false:true} onClick={e => setShowIngredient(false)}>Ratio</button>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}